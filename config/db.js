// config/db.js
const { Pool } = require('pg');
const dotenv = require('dotenv'); // dotenv se importa aqu√≠
dotenv.config(); // Y se configura aqu√≠

// Usar la URL completa de conexi√≥n para mayor compatibilidad
const connectionString = process.env.DATABASE_URL || `postgresql://${process.env.DB_USER}:${process.env.DB_PASSWORD}@${process.env.DB_HOST}:${process.env.DB_PORT}/${process.env.DB_NAME}`;

// Configuraci√≥n con manejo de errores mejorado
const pool = new Pool({
  host: 'db.hnprqhbocsdjyivxvdtv.supabase.co',
  port: 5432,
  database: 'postgres',
  user: 'postgres',
  password: process.env.DB_PASSWORD || 'Clau2703.',
  ssl: {
    rejectUnauthorized: false
  },
  // Timeout de conexi√≥n
  connectionTimeoutMillis: 20000,
  query_timeout: 20000,
  statement_timeout: 20000,
  idle_in_transaction_session_timeout: 30000,
  // Configuraci√≥n adicional para Render
  max: 20,
  idleTimeoutMillis: 30000,
  allowExitOnIdle: false
});

// Conexi√≥n no bloqueante - el servidor sigue funcionando aunque falle
pool.connect((err, client, release) => {
  if (err) {
    console.error('‚ùå Error conectando a la base de datos PostgreSQL:', err.message);
    console.log('üîÑ El servidor API seguir√° funcionando, reintentando conexi√≥n...');
    // Reintentar conexi√≥n cada 30 segundos
    setTimeout(() => {
      pool.connect((retryErr, retryClient, retryRelease) => {
        if (retryErr) {
          console.error('‚ùå Reintento de conexi√≥n fall√≥:', retryErr.message);
        } else {
          console.log('‚úÖ Conectado a la base de datos PostgreSQL (Supabase) - Reintento exitoso');
          retryRelease();
        }
      });
    }, 30000);
    return;
  }
  console.log('‚úÖ Conectado a la base de datos PostgreSQL (Supabase)');
  release();
});

module.exports = pool;
